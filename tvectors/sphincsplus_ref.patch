diff -Nrau hackedbu/address.c sphincsplus/ref/address.c
--- hackedbu/address.c	Fri Nov 17 07:53:02 2023
+++ sphincsplus/ref/address.c	Fri Nov 17 09:02:08 2023
@@ -64,8 +64,6 @@
  * Copy the layer, tree and keypair fields of the address structure.  This is
  * used when we're doing multiple things within the same OTS keypair
  */
-#pragma clang diagnostic push
-#pragma clang diagnostic ignored "-Wcast-qual"
 void copy_keypair_addr(uint32_t out[8], const uint32_t in[8])
 {
     memcpy( out, in, SPX_OFFSET_TREE+8 );
@@ -74,7 +72,6 @@
 #endif
     ((unsigned char *)out)[SPX_OFFSET_KP_ADDR1] = ((unsigned char *)in)[SPX_OFFSET_KP_ADDR1];
 }
-#pragma clang diagnostic pop
 
 /*
  * Specify which Merkle chain within the OTS we're working with
diff -Nrau hackedbu/fors.c sphincsplus/ref/fors.c
--- hackedbu/fors.c	Fri Nov 17 08:10:50 2023
+++ sphincsplus/ref/fors.c	Fri Nov 17 09:02:08 2023
@@ -56,7 +56,7 @@
     for (i = 0; i < SPX_FORS_TREES; i++) {
         indices[i] = 0;
         for (j = 0; j < SPX_FORS_HEIGHT; j++) {
-            indices[i] ^= ((m[offset >> 3] >> (7-(offset & 0x7))) & 1u) << (SPX_FORS_HEIGHT-1-j);
+            indices[i] ^= ((m[offset >> 3] >> (offset & 0x7)) & 1u) << j;
             offset++;
         }
     }
diff -Nrau hackedbu/sign.c sphincsplus/ref/sign.c
--- hackedbu/sign.c	Fri Nov 17 08:09:18 2023
+++ sphincsplus/ref/sign.c	Fri Nov 17 09:02:08 2023
@@ -122,7 +122,7 @@
     /* Optionally, signing can be made non-deterministic using optrand.
        This can help counter side-channel attacks that would benefit from
        getting a large number of traces when the signer uses the same nodes. */
-    memcpy(optrand, pk, SPX_N);
+    randombytes(optrand, SPX_N);
     /* Compute the digest randomization value. */
     gen_message_random(sig, sk_prf, optrand, m, mlen, &ctx);
 
